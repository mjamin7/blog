{
  "hash": "9415a8e168a02258a4db683430e00e9f",
  "result": {
    "markdown": "## Exercice 2\n\nCe second exercice, nous a permis de travailler avec différentes base de données venant d'une liste. Ici aussi, nous avons extrait les informations principales et importantes de ces bases notamment à l'aide de la création de fonctions en manipulant des chaines des caractères.\n\nLa collaboration de Rodolphe Mocaër a été essentielle pour la réalisation de la majorité de cet exercice, cette contribution sera explicitement mentionnée pour chaque question où son aide a été sollicitée.\n\n### Question 1\n\n#### Lancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n\nlibrary(purrr)\n\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\n\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\n\nhtml_elements(\".wikitable\") |>\n\nhtml_table()\n```\n:::\n\n\n#### Que s'est-il passé ? Que contient l'objet list_tables ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables\n```\n:::\n\n\nCette liste contient 6 tables différentes de différentes dimensions.\n\n### Question 2\n\n#### Nous allons tout d'abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n'est pas bien formattée.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- list_tables [[1]]\n\nprint(data_medailles_sport_ete)\n```\n:::\n\n\n#### Supprimez la première colonne\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- data_medailles_sport_ete[,-1]\n```\n:::\n\n\n#### Supprimer la première ligne\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1,]\n```\n:::\n\n\n#### Supprimer le nom des colonnes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data_medailles_sport_ete) <- NULL\n```\n:::\n\n\n#### Renommez les colonnes\n\nc(\"Discipline\", \"Annees\", \"Editions\",\"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data_medailles_sport_ete) <- c(\"Discipline\", \"Annees\", \"Editions\",\n\n                                        \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\",\n\n                                        \"Athletes_medailles\",\"Athletes_or\")\n```\n:::\n\n\n#### Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d'entiers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data_medailles_sport_ete)\n\nlibrary(dplyr)\n\ndata_medailles_sport_ete <- data_medailles_sport_ete |> \n\n  mutate(Editions = as.integer(Editions),\n\n         Epreuves_2020 = as.integer(Epreuves_2020),\n\n         Or = as.integer(Or),\n\n         Argent = as.integer(Argent),\n\n         Bronze = as.integer(Bronze),\n\n         Total = as.integer(Total))\n\nprint(data_medailles_sport_ete)\n\nstr(data_medailles_sport_ete)\n```\n:::\n\n\n### Question 3\n\n#### Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultats_medailles <- data_medailles_sport_ete |> \n\n  group_by(Discipline) |> \n\n  summarise(Total) |> \n\n  arrange(desc(Total)) |> \n\n  head(3)\n\nprint(resultats_medailles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Discipline               Total\n  <chr>                    <int>\n1 Athlétisme                3085\n2 Natation(hommes, femmes)  1814\n3 Lutte                     1358\n```\n:::\n:::\n\n\nLes 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des JO sont :\\\\\n\n\\- L'athlétisme\n\n\\- La natation\n\n\\- La lutte\n\n### Question 4\n\n#### Quelles sont les 3 disciplines avec le moins d'épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoins_epreuve_2020 <- data_medailles_sport_ete |> \n\n  group_by(Discipline) |> \n\n  summarise(Epreuves_2020) |> \n\n  arrange(Epreuves_2020) |> \n\n  head(10)\n\nprint(moins_epreuve_2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   Discipline            Epreuves_2020\n   <chr>                         <int>\n 1 Football                          2\n 2 Golf                              2\n 3 Handball                          2\n 4 Hockey sur gazon                  2\n 5 Natation synchronisée             2\n 6 Pentathlon moderne                2\n 7 Volley-ball                       2\n 8 Water polo                        2\n 9 Triathlon                         3\n10 Basket-ball                       4\n```\n:::\n:::\n\n\nLes disciplines avec le moins d'épreuves en 2020 sont :\\\\\n\n\\- Le football\n\n\\- Le golf\n\n\\- Le handball\n\n\\- Le hockey sur gazon\n\n\\- La natation synchronisée\n\n\\- Le pentathlon moderne\n\n\\- Le volley-ball\n\n\\- Le water polo\n\nIl y en a donc 8.\n\n### Question 5\n\n#### La colonne Editions nous renseigne sur le nombre total d'apparence des disciplines aux JO d'été.\n\n#### Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions <- function(depuis_annee, data_medailles_sport_ete) {\n\n \n\n   #Extrayons les années de la colonne 'Années'\n\n  data_medailles_sport_ete$Annees <- as.character(data_medailles_sport_ete$Annees)\n\n  \n\n  #Utilision une expression régulière pour extraire les années de chaque cellule\n\n  data_medailles_sport_ete$Annees <- gsub(\".*(\\\\d{4}).*\", \"\\\\1\", data_medailles_sport_ete$Annees)\n\n  \n\n  #Convertissons la colonne Années en numérique\n\n  data_medailles_sport_ete$Annees <- as.numeric(data_medailles_sport_ete$Annees)\n\n  \n\n  #Filtrons les disciplines qui ont commencé à partir de 'depuis'\n\n  disciplines_filtrees <- subset(data_medailles_sport_ete, Annees >= depuis_annee)\n\n  \n\n  #Calculons le nombre total d'éditions pour chaque discipline\n\n  result <- aggregate(Editions ~ Discipline, disciplines_filtrees, sum)\n\n  \n\n  return(result)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat <- calcul_nb_editions(1800, data_medailles_sport_ete)\n\nprint(resultat)\n```\n:::\n\n\nCela renvoit bien le bon nombre d'éditions.\n\n### Question 6\n\n#### Dans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. Par exemple, l'appel suivant: calcul_nb_editions_str(\"1896, 1904, depuis 1920\") qui retournera la valeur 26.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(chaine) {\n\n  # Utilisation d'une expression régulière pour extraire les années\n\n  annees <- as.numeric(regmatches(chaine, gregexpr(\"\\\\b\\\\d{4}\\\\b\", chaine))[[1]])\n\n  \n\n  # Si aucune année n'est trouvée, chercher les occurrences de \"depuis\" dans la chaîne\n\n  if (length(annees) == 0) {\n\n    depuis_occurrences <- gregexpr(\"\\\\bdepuis\\\\b\", chaine)\n\n    \n\n    # Si \"depuis\" est trouvé, extraire l'année après \"depuis\"\n\n    if (any(depuis_occurrences[[1]] > 0)) {\n\n      annees_depuis <- as.numeric(regmatches(chaine, gregexpr(\"\\\\b\\\\d{4}\\\\b\", chaine, start = depuis_occurrences[[1]][1]))[[1]])\n\n      annees <- c(annees_depuis, max(annees_depuis))  # Utilisation de l'année après \"depuis\" comme début\n\n    } else {\n\n      return(0)  # Si ni année ni \"depuis\" n'est trouvé, renvoyer la valeur 0\n\n    }\n\n  }\n\n  \n\n  # Ajouter une correction pour les années manquantes (1940 et 1944)\n\n  annees_manquantes <- c(1940, 1944)\n\n  annees <- sort(unique(c(annees, annees_manquantes)))\n\n  \n\n  # Exclure les années sans éditions\n\n  annees <- annees[!(annees %in% c(1940, 1944))]\n\n  \n\n  # Calculons le nombre d'éditions en utilisant la différence entre la première et la dernière année\n\n  nb_editions <- max(annees) - min(annees) + 1\n\n  \n\n  return(nb_editions)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat <- calcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\nprint(resultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\nIl y a 26 éditions entre 1920 et 2020 + deux éditions en 1896 et 1904 mais moins 2 éditions en 1940 et 1944 donc il faut bien que le résultat renvoie 26. Ici cela nous renvoie 25.\n\nAvec l'aide de Rodolphe Mocaër nous avons pu réaliser un second code afin de trouver la bonne réponse :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(x) {\n\n  r <- str_split(x, \",\", simplify = TRUE)\n\n  part <- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n\n  return(part)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(part) {\n\n  depuis_years <- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |> \n\n    unlist() |> \n\n    str_extract(\"\\\\d+\")\n\n \n\n  Calcul_edition <- as.integer(depuis_years)\n\n  result <- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition < 1916, 3, ifelse(Calcul_edition < 1944, 2, 0))\n\n \n\n  part2 <- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n\n \n\n  return(part2)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_final <- function(part2) {\n\n  part2_numerique <- as.numeric(part2)\n\n  resultat_final <- sum(part2_numerique)\n\n  return(resultat_final)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions <- function(x) {\n\n  part1 <- calcul_nb_editions_str(x)\n\n  part2 <- calcul_nb_editions_int(part1)\n\n  resultat_final <- calcul_final(part2)\n\n  return(resultat_final)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat2 <- calcul_nb_editions(\"1896, 1904, depuis 1920\")\n\nprint(resultat2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\nIl y a bien 26 éditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat3 <- calcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\nprint(resultat3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"            \"1\"            \" depuis 1920\"\n```\n:::\n:::\n\n\n### Question 7\n\n#### Définissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et calcul_nb_editions.character.\n\n#### Quels résultats donnent les appels :\n\ncalcul_nb_editions(2000) et calcul_nb_editions(\"1904--1924, depuis 1948\")\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(x) {\n\n  r <- str_split(x, \",\", simplify = TRUE)\n\n  part <- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n\n  return(part)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(part) {\n\n  depuis_years <- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |> \n\n    unlist() |> \n\n    str_extract(\"\\\\d+\")\n\n \n\n  Calcul_edition <- as.integer(depuis_years)\n\n  result <- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition < 1916, 3, ifelse(Calcul_edition < 1944, 2, 0))\n\n \n\n  part2 <- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n\n \n\n  return(part2)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions.character <- function(part2) {\n\n  dates <- str_match(part2, \"([file://\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4}]\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\")\n\n  a <- as.integer(dates[1, 2])\n\n  b <- as.integer(dates[1, 3])\n\n \n\n  x <- ifelse(a < 1915 & b > 1917, 1,\n\n              ifelse(a < 1915 & b > 1945, 3,\n\n                     ifelse(1917 < a & a < 1939 & b > 1945, 2, 0)))\n\n \n\n  c_value <- (b - a) / 4 + 1 - x\n\n  part3 <- ifelse(grepl(\"(\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\", part2), as.character(c_value), part2)\n\n  return(part3)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_final2 <- function(part3) {\n\npart3_numerique <- as.numeric(part3[grepl(\"^\\\\d+$\", part3)])\n\n  resultat_final <- sum(part3_numerique)\n\n  return(resultat_final)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions2 <- function(x) {\n\n  part1 <- calcul_nb_editions_str(x)\n\n  part2 <- calcul_nb_editions_int(part1)\n\n  part3 <- calcul_nb_editions.character(part2)\n\n  resultat_final <- calcul_final2(part3)\n\n \n\n  return(resultat_final)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat3 <- calcul_nb_editions(2000)\n\nprint(resultat3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat4 <- calcul_nb_editions(\"1904–1924, depuis 1948\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in calcul_final(part2): NAs introduits lors de la conversion\nautomatique\n```\n:::\n\n```{.r .cell-code}\nprint(resultat4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n### Question 8\n\n#### En Athlétisme, le Finlandais Paavo Nurmi détient le record de médailles avec 12 médailles obtenues lors des JO d'hiver.\n\n##### Implémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d'olympiades. Note : s'il y a plusieurs athlètes à égalité, alors la cellule comporte plusieurs éléments, et une manipulation de la chaîne de caractères est nécessaire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles2 <- function(data_medailles_sport_ete) {\n\n  total_medailles2 <- rowSums(data_medailles_sport_ete[, c(\"Or\", \"Argent\", \"Bronze\")])\n\n  max_medailles2 <- max(total_medailles2)\n\n  athletes_with_max_medals2 <- data_medailles_sport_ete$Athletes_medailles[total_medailles2 == max_medailles2]\n\n  return(athletes_with_max_medals2)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat4 <- calcul_medailles_individuelles2(data_medailles_sport_ete)\n\nprint(resultat4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Paavo Nurmi (FIN) (9-3-0)\"\n```\n:::\n:::\n\n\nLe même résultat ressort.\n\n### Question 9\n\n#### Quel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_athletes <- unlist(lapply(data_medailles_sport_ete$Athletes_medailles, function(athletes) {\n\n  calcul_medailles_individuelles2(data_medailles_sport_ete[data_medailles_sport_ete$Athletes_medailles == athletes, ])\n\n}))\n\n#Nettoyons les noms des athlètes en supprimant les informations sur les médailles\n\ncleaned_athletes <- gsub(\"\\\\s*\\\\(.*\\\\)\", \"\", all_athletes)\n\ntop_3_athletes <- head(sort(table(cleaned_athletes), decreasing = TRUE), 3)\n\nprint(top_3_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncleaned_athletes\nAna Fernández Andreï Lavrov   Ben Ainslie \n            1             1             1 \n```\n:::\n:::\n\n\nLe top 3 des athlètes est :\n\n\\- Ana Fernandez\n\n\\- Andrei Lavrov\n\n\\- Ben Ainslie\n\nCependant, ce code ne semble pas fonctionner correctement. Il semble nous donner les 3 premiers athlètes par ordre alphabétique.\n\nAvec l'aide de Rodolphe Mocaër nous avons pu réaliser ce code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles2 <- function(data_frame) {\n\n    medailles_df <- data.frame(\n\n      Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", data_frame$Athletes_medailles),\n\n      Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles),\n\n      OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n\n      ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n\n      BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles))\n\n    )\n\n   \n\n    medailles_df$TotalMedailles <- medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE\n\n   \n\n    classement_df <- medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n\n   \n\n    meilleurs_athletes <- head(classement_df$Athlete, 3)\n\n   \n\n    phrase <- cat(\"Les 3 meilleurs athlètes sont:\\n\", paste(\"- \", meilleurs_athletes, collapse = \"\\n\"))\n\n   \n\n    return(phrase)\n\n  }\n\ncalcul_medailles_individuelles2(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes 3 meilleurs athlètes sont:\n -  Michael Phelp\n-  Larissa Latynina (URS) (9-5-4)\n-  Edoardo Mangiarott\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nLe top 3 des meilleurs athlètes est :\n\n\\- Michael Phelp\n\n\\- Larissa Latynina\n\n\\- Edoardo Mangiarott\n\n### Question 10\n\n#### Quels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d'or individuelles reccueillies ?\n\n\\- Pour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d'une chaine de charactère extraira le nombre d'athlète et leur nationalité. Par exemple, la chaine de caractère \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" donnera en sortie c(\"FIN\" = 1, \"USA\" = 1).\\\\\n\n\\- Vous utilisez la fonction lapply pour appliquer la fonction à toute la colonne\\\\\n\n\\- Vous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Fonction pour extraire la nationalité d'une chaîne de caractères\n\nextraire_nationalite_athlete <- function(chaine) {\n\n  nationalites <- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n\n  return(nationalites)\n\n}\n\nnationalites_list <- unlist(lapply(data_medailles_sport_ete$Athletes_or, extraire_nationalite_athlete))\n\ntop_3_nationalites <- head(sort(table(nationalites_list), decreasing = TRUE), 3)\n\nprint(top_3_nationalites)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnationalites_list\nUSA CHN CUB \n 20  13   8 \n```\n:::\n:::\n\n\nLes 3 nations les plus représentés pour toutes les épreuves au classement du nombre de médailles d'or individuelles sont :\n\n\\- Les Etats Unis avec 20\n\n\\- La Chine avec 13\n\n\\- Cuba avec 8\n\n### Question 11\n\n#### Intéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d'hiver.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_hiver <- list_tables [[2]]\n\nprint(table_hiver)\n```\n:::\n\n\n#### Supprimez la première colonne\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_hiver <- table_hiver[,-1]\n```\n:::\n\n\n#### Renommer les colonnes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(table_hiver) = c(\"Discipline\", \"Annee\", \"Editions\", \"Epreuves_2014\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n```\n:::\n\n\n#### Supprimer la première ligne\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_hiver <- table_hiver[-1,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(table_hiver)\n\nlibrary(dplyr)\n\ntable_hiver <- table_hiver |> \n\n  mutate(Editions = as.integer(Editions),\n\n         Epreuves_2014 = as.integer(Epreuves_2014),\n\n         Or = as.integer(Or),\n\n         Argent = as.integer(Argent),\n\n         Bronze = as.integer(Bronze),\n\n         Total = as.integer(Total))\n\nprint(table_hiver)\n\nstr(table_hiver)\n```\n:::\n\n\n#### Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10.\n\n#### Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ? Quelle différence voyez-vous entre lapply et les fonctions de purrr ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles2_purrr <- function(data_frame) {\n\n    medailles_df <- data.frame(\n\n      Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", data_frame$Athletes_medailles),\n\n      Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles),\n\n      OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n\n      ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n\n      BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles))\n\n    )\n\n   \n\n    medailles_df$TotalMedailles <- medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE\n\n   \n\n    classement_df <- medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n\n   \n\n    meilleurs_athletes <- head(classement_df$Athlete, 3)\n\n   \n\n    phrase <- cat(\"Les 3 meilleurs athlètes sont :\\n\", paste(\"- \", meilleurs_athletes, collapse = \"\\n\"))\n\n   \n\n    return(phrase)\n\n}\n\ncalcul_medailles_individuelles2_purrr(table_hiver)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes 3 meilleurs athlètes sont :\n -  Marit Bjørgen (NOR) (8-4-3)\n-  Ole Einar Bjørndalen (NOR) (8-4-1)\n-  Ireen Wüst (NED) (5-5-1)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nLes 3 meilleurs athlètes sont donc :\n\n\\- Marit Bjørgen\n\n\\- Ole Einar Bjørndalen\n\n\\- Ireen Wüst\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextraire_nationalite_athlete <- function(chaine) {\n\n  nationalites <- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n\n  return(nationalites)\n\n}\n\nnationalites_list <- map(table_hiver$Athletes_or, extraire_nationalite_athlete) |> \n\n  flatten_chr()\n\ntop_3_nationalites <- nationalites_list |> \n\n  table() |> \n\n  sort(decreasing = TRUE) |> \n\n  head(3)\n\nprint(top_3_nationalites)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnationalites_list\nCAN NOR GER \n  8   7   6 \n```\n:::\n:::\n\n\nLes 3 nations les plus représentés pour toutes les épreuves au classement du nombre de médailles d'or individuelles sont :\n\n\\- Le Canada avec 8\n\n\\- La Norvège avec 7\n\n\\- L'Allemagne avec 6\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}