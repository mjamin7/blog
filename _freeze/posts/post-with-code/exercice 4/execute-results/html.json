{
  "hash": "48adaafab06152dbbc4c7696b393e6e0",
  "result": {
    "markdown": "## Exercice 4\n\nCet exercice, nous a permis d'établir notre package final olympicsWeather\n\n### Question 1\n\n#### Installez les packages devtools, httr2, jsonlite\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ninstall.packages(\"httr2\")\ninstall.packages(\"jsonlite\")\ninstall.packages(\"usethis\")\ninstall.packages(\"htmltools\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLe chargement a nécessité le package : usethis\n```\n:::\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(purrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'purrr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:jsonlite':\n\n    flatten\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\nlibrary(usethis)\nlibrary(roxygen2)\nlibrary(usethis)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n:::\n\n\n### Question 2\n\n#### Dans une nouvelle session R, créer un nouveau projet de package intitulé olympicsWeather en utilisant la fonction create_package de la librairie usethis. Pourquoi n'est-il pas nécessaire d'installer explicitement usethis ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_package(\"olympicsWeather\")\n```\n:::\n\n\n### Question 3\n\n#### Créer un nouveau script R intitulé get_weather_forecast en utilisant la fonction usethis::use_r().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"get_weather_forecast\")\n```\n:::\n\n\n### Question 4\n\n#### Sans implémenter la fonction pour l'instant, écrivez une requête d'api en utilisant la librairie httr2 que vous aurez préalablement installé.\n\n• l'url de l'api open-api est la suivante: https://api.open-meteo.com/v1/forecast\\\\\n\n• vous utiliserez les fonctions request, req_url_query, req_perform, resp_body_json pour passer la requête. Ces instructions peuvent se chaîner avec des pipes. La fonction request permet d'initialiser l'objet de request en passant l'url de l'api. La fonction req_url_query permet de passer différents paramètres à la requête, quand req_perform exécute la requête et récupère les résultats dans la session R. Enfin, la fonction resp_body_json extrait les données retournées en json du résultat de la requête. Vous pourrez utiliser la fonction tibble::as_tibble() pour convertir en tibble la table retournée.\\\\\n\n• pour la première requête, nous souhaitons obtenir la prévision météo aux coordonnées géographiques c(48.85, 2.35)\\\\\n\n•nous souhaitons obtenir les informations de températures, de températures ressenties, de probabilité de précipitation, et de quantités de précipitations. Indice, vous devrez passer le paramètre suivant (entre autres) hourly= c(\"temperature_2m\", \"apparent_temperature\", \"precipitation_probability\", \"precipitation\") à la fonction req_url_query\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://api.open-meteo.com/v1/forecast\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrequest(url) |>\n\n  req_url_query(latitude=48.85,longitude=2.35, hourly=c(\"temperature_2m\",\"apparent_temperature\",\"precipitation_probability\", \"precipitation\"), .multi = \"comma\"\n\n  ) |>\n\n  req_perform() |>\n\n  resp_body_json() |>\n\n  tibble::as_tibble() |> View()\n```\n:::\n\n\n### Question 5\n\n#### Décrivez le résultat. Qu'avons nous obtenu suite à notre requête ? Quels paramètres souhaitons nous changer si nous voulons pouvoir récupérer les prévisions météo pour tous les sites des JOs ?\n\nSuite à notre requête, nous avons obtenus un tibble pour l'endroit se situant à la latitude 48.85 et la longitude 2.85.\n\nDans ce tibble, nous retrouvons donc une ligne correspondant à la date avec le fuseau horaire, la seconde ligne correspond aux températures, la troisième à l'humidité, la quatrième à la probabilité des précipitations et enfin la dernière aux précipitations comprenant la pluie, les averses et la neige (cf documentation : https://open-meteo.com/en/docs/)\n\n### Question 6\n\n#### L'objectif est donc d'implémenter une fonction get_weather_forecast pour récupérer une table de prévisions météo à une coordonnées GPS donnée. Avant d'implémenter cette fonction accessible à l'utilisateur, nous souhaitons implémenter plusieurs fonctions internes\n\nNous devons donc établir différentes fonctions :\n\n### Question 7\n\n#### Fonction perform_request:\n\n• la fonction perform request prend en entrée deux arguments: latitude et longitude\\\\\n\n• elle effectue la requête sur l'api publique ci-dessus, et retourne le contenu du body sous forme d'une tibble (exactement comme dans la question 4)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Effectue une requête à l'API pour obtenir les prévisions météo.\n\n#'\n\n#' Cette fonction prend en entrée les coordonnées GPS (latitude, longitude) et retourne\n\n#' les prévisions météo sous forme de tibble.\n\n#'\n\n#' @param lat La latitude (numeric).\n\n#' @param lon La longitude (numeric).\n\n#'\n\n#' @export\n\nperform_request <- function(lat, lon) {\n\n  url <- \"https://api.open-meteo.com/v1/forecast\"\n\n    request(url) |>\n\n    req_url_query(latitude=lat,longitude=lon, hourly= c(\"temperature_2m\",\"apparent_temperature\",\"precipitation_probability\",\"precipitation\"), .multi = \"comma\"\n\n    ) |>\n\n    req_perform() |>\n\n    resp_body_json() |>\n\n    as_tibble ()\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresp <- perform_request(48.85, 2.35)\n```\n:::\n\n\n### Question 8\n\n#### Fonction unnest_response:\n\n• les résultats obtenus après la requête n'étant pas bien formattés, il faut écrire une fonction pour transformer la forme de la tibble obtenue\\\\\n\n• la fonction en entrée prendre une tibble au format issu de la requête\\\\\n\n• et retournera les mêmes données au schema suivant:\\\\\n\n\\-- date_heure: heure au tz UTC\\\\\n\n\\-- tempature_celsius: données de température\\\\\n\n\\-- temperature_ressentie_celsius: données de température ressentie\\\\\n\n\\-- precipation_proba: probabilité de pluie\\\\\n\n\\-- precipitation: precipitation en mm\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Transforme la tibble obtenue de la requête en une structure de données spécifique.\n\n#'\n\n#' Cette fonction prend en entrée la tibble obtenue de la requête et la transforme pour\n\n#' obtenir une nouvelle tibble avec les informations nécessaires.\n\n#'\n\n#' @param extraction sert a extraire les différentes colonnes de la liste de données\n\n#'\n\n#' @export\n\nunnest_response <- function(extraction){\n\n  hourly_data <- extraction$hourly\n\n  if (length(hourly_data) == 0) {\n\n    stop(\"Aucune donnée dans la colonne 'hourly'.\")\n\n  }\n\n  output_tibble <- tibble(\n\n    \"date_heure\" = ymd_hm(unlist(hourly_data[[1]])),\n\n    \"temperature_celsius\" = unlist(hourly_data[[2]]),\n\n    \"temperature_ressentie_celsius\" = unlist(hourly_data[[3]]),\n\n    \"precipitation_proba\" = unlist(hourly_data[[4]]),\n\n    \"precipitation\" = unlist(hourly_data[[5]])\n\n  )\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresp <- perform_request(48.85, 2.35)\n\nunnested_table <- unnest_response(resp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunnested_table\n```\n:::\n\n\n### Question 9\n\n#### Tests unitaires pour la fonction unnest_response:\n\n• créez un script de tests en utilisant la fonction usethis::use_test(\"unnest_response\")\\\\\n\n• dans ce script, créez un jeu de données minimal pour tester le comportement de la fonction\\\\\n\n• testez la fonction, en proposant plusieurs tests unitaires. Exemple de tests unitaires:\\\\\n\n\\-- testez que la fonction renvoie le bon nombre de lignes\\\\\n\n\\-- testez que les valeurs de la colonne temperature correspondent aux valeur proposées en entrée\\\\\n\n\\-- testez le nom des colonnes en sortie\\\\\n\n\\-- testez le nombre de colonnes en sortie\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_test(\"unnest_response\")\n```\n:::\n\n\nRésultat de cette commande :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"multiplication works\", {\n\n  expect_equal(2 * 2, 4)\n\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n✔ Setting active project to 'C:/Users/mathi/OneDrive/Documents/M1 ECAP/Semestre 2/R avancé et Git/Exercice 4/olympicsWeather'\n\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n\n✔ Adding '3' to Config/testthat/edition\n\n✔ Creating 'tests/testthat/'\n\n✔ Writing 'tests/testthat.R'\n\n✔ Writing 'tests/testthat/test-unnest_response.R'\n\n• Modify 'tests/testthat/test-unnest_response.R'\n```\n:::\n\n\nTest :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n\n#Jeu de données \n\ncontext(\"unnest_response\")\n\nmock_data <- tibble::tibble(\n\n  hourly = list(\n\n    list(\"2024-02-24 12:00:00\", \"2024-02-24 13:00:00\"),\n\n    list(22, 28),\n\n    list(17, 13),\n\n    list(0.7, 0.4),\n\n    list(0.9, 0.3)\n\n  )\n\n)\n\nmock_data_df <- data.frame(do.call(cbind, mock_data$hourly))\n\ncolnames(mock_data_df) <- c(\"date_heure\", \"temperature_celsius\", \"temperature_ressentie_celsius\", \"precipitation_proba\", \"precipitation\")\n\nprint(mock_data_df)\n\n#Test unitaire\n\n#Bon nombre de lignes\n\ntest_that(\"La fonction renvoie le bon nombre de lignes\", {\n\n  output_tibble <- unnest_response(mock_data)\n\n  expect_equal(nrow(output_tibble), nrow(mock_data_df))\n\n})\n\n#Bonne température\n\ntest_that(\"La fonction renvoie le bon nombre de lignes\", {\n\n  output_tibble <- unnest_response(mock_data)\n\n  expect_true(all(output_tibble[[2]] == mock_data_df[[2]]),\n\n              info = \"Les colonnes ne sont pas égales.\")\n\n})\n\n#Bon nom des colonnes \n\ntest_that(\"Les valeurs de la colonne temperature correspondent aux valeurs d'entrée\", {\n\n  output_tibble <- unnest_response(mock_data)\n\n  expect_true(all.equal(names(output_tibble), names(mock_data_df)),\n\n              info = \"Les noms de colonnes ne sont pas égaux.\")\n\n})\n\n#Bon nombre de colonnes\n\ntest_that(\"Le nombre de colonnes en sortie est correct\", {\n\n  output_tibble <- unnest_response(mock_data)\n\n  expect_equal(ncol(output_tibble), ncol(mock_data_df),\n\n               info = \"Le nombre de colonnes n'est pas égal.\")\n\n})\n\nusethis::use_test(\"unnest_response\")\n\ntest_file(\"tests/testthat/test-unnest_response.R »)\n```\n:::\n\n\nRésultat du test : A l'aide de Rodolphe Mocaër\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Library\n\n  library(testthat) \n\n#Jeu de données\n\n heure au tz UTC données de température\n\n1 2024-02-24 12:00:00                     20\n\n2 2024-02-24 13:00:00                     22\n\n  données de température ressentie probabilité de pluie\n\n1                               18                  0.2\n\n2                               20                  0.3\n\n  precipitation en mm\n\n1                 0.5\n\n2                 0.8\n\n#Test unitaire\n\n#Bon nombre de ligne\n\nTest passed \n\n#Bonne temperature\n\nTest passed \n\n#Bon nom de colonne \n\nTest passed  \n\n#Bon nombre de colonne \n\nTest passed  \n\nusethis::use_test(\"unnest_response\") \n\n✔ Setting active project to 'C:/Users/mathi/OneDrive/Documents/M1 ECAP/Semestre 2/R avancé et Git/Exercice 4/olympicsWeather'\n\n• Modify 'tests/testthat/test-unnest_response.R'\n\ntest_file(\"tests/testthat/test-unnest_response.R »)`\n```\n:::\n\n\n### Question 10\n\n#### Lors de la séance 1, nous avons développé un outil permettant de trouver les coordonnées GPS à partir d'un nom d'adresse (en utilisant le package tidygeocoder et la fonction reverse_geocode). Nous souhaitons que l'utilisateur puisse obtenir des prévisions météos à partir de:\n\n• coordonnées GPS, i.e un vecteur numérique de taille 2\\\\\n\n• un nom de site olympique ou une adresse. A partir du code de la séance 1, définissez une fonction address_to_gps convertissant une adresse en coordonnées gps sous la forme d'un vecteur numérique de taille 2.\\\\\n\nDéfinir une fonction get_forecast générique, et deux implémentations get_forecast.character et get_forecast.numeric\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Convertit une adresse en coordonnées GPS.\n\n#'\n\n#' Cette fonction prend en entrée une adresse et renvoie les coordonnées GPS sous\n\n#' forme d'un vecteur numérique de taille 2.\n\n#'\n\n#' @param adresse Une adresse sous forme de texte.\n\n#'\n\n#' @return Un vecteur numérique de taille 2 avec les coordonnées GPS (latitude, longitude).\n\n#'\n\n#' @export\n\naddress_to_gps <- function(adresse) {\n\n  df_adresse <- data.frame(\"nom\" = character(), addr = character(), stringsAsFactors = FALSE)\n\n  df_adresse <- rbind(df_adresse, data.frame(addr = adresse), stringsAsFactors = FALSE)\n\n  resultat_geocodage <- df_adresse |>\n\n    geocode(addr, method = 'arcgis')\n\n  df_adresse <- resultat_geocodage\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat_final <- address_to_gps(\"9 Quai Henri Barbusse, Nantes, 44000, FRANCE\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPassing 1 address to the ArcGIS single address geocoder\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nQuery completed in: 0.6 seconds\n```\n:::\n\n```{.r .cell-code}\nprint(resultat_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  addr                                           lat  long\n  <chr>                                        <dbl> <dbl>\n1 9 Quai Henri Barbusse, Nantes, 44000, FRANCE  47.2 -1.55\n```\n:::\n:::\n\n\n### Question 11\n\n#### Implémentez une fonction interne get_gps_coordinate renvoyant des coordonnées x,y pour une adresse en utilisant les fonctions de la question 10 (ou de la semaine 1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Récupère les coordonnées GPS pour une adresse donnée.\n\n#'\n\n#' Cette fonction prend en entrée une adresse et renvoie les coordonnées GPS sous\n\n#' forme d'un vecteur numérique de taille 2 en utilisant la fonction address_to_gps.\n\n#'\n\n#' @param address Une adresse sous forme de texte.\n\n#'\n\n#' @return Un vecteur numérique de taille 2 avec les coordonnées GPS (latitude, longitude).\n\n#'\n\n#' @export\n\nget_gps_coordinate <- function(address) {\n\n  coord_df <- address_to_gps(address)\n\n  latitude <- coord_df$lat\n\n  longitude <- coord_df$long\n\n  coordinates <- c(latitude[1], longitude[1])\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordinates <- get_gps_coordinate(\"9 Quai Henri Barbusse, Nantes, 44000, FRANCE\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPassing 1 address to the ArcGIS single address geocoder\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nQuery completed in: 0.1 seconds\n```\n:::\n\n```{.r .cell-code}\nprint(coordinates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47.224462 -1.552357\n```\n:::\n:::\n\n\n### Question 12\n\n### Implémentez la fonction get_forecast.numeric. Cette fonction prend en entrée un argument xy, contenant un vecteur numérique de coordonnées x,y (latitude, longitude) de taille 2. Si cette condition n'est pas vérifiée, alors la fonction devra déclarer une erreur. La fonction appelera les deux fonctions perform_request et unnest_response avant de retourner la tibble de résultat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Obtient les prévisions météo en fonction des coordonnées GPS.\n\n#'\n\n#' Cette fonction prend en entrée un vecteur numérique de taille 2 (latitude, longitude)\n\n#' et renvoie les prévisions météo sous forme de tibble.\n\n#'\n\n#' @param xy Un vecteur numérique de taille 2 représentant les coordonnées GPS.\n\n#'\n\n#' @return Un tibble avec les prévisions météo.\n\n#'\n\n#' @seealso \\code{\\link{perform_request}}, \\code{\\link{unnest_response}}\n\n#'\n\n#' @export\n\nget_forecast.numeric <- function(xy) {\n\n  if (!is.numeric(xy) || length(xy) != 2) {\n\n    stop(\"L'argument xy doit être un vecteur numérique de taille 2 (latitude, longitude).\")\n\n  }\n\n  response_table <- perform_request(xy[1], xy[2])\n\n  unnested_table <- unnest_response(response_table)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxy_coordinates <- c(48.85, 2.35)\n\nforecast_result <- get_forecast.numeric(xy_coordinates)\n\nprint(forecast_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 5\n   date_heure          temperature_celsius temperature_ressentie_celsius\n   <dttm>                            <dbl>                         <dbl>\n 1 2024-03-07 00:00:00                 4.7                           2.7\n 2 2024-03-07 01:00:00                 4.1                           1.7\n 3 2024-03-07 02:00:00                 3.7                           1.6\n 4 2024-03-07 03:00:00                 3                             0.8\n 5 2024-03-07 04:00:00                 2.7                           0.5\n 6 2024-03-07 05:00:00                 2.3                           0  \n 7 2024-03-07 06:00:00                 1.9                          -0.4\n 8 2024-03-07 07:00:00                 2                            -0.2\n 9 2024-03-07 08:00:00                 3.1                           1.1\n10 2024-03-07 09:00:00                 5.9                           3.8\n# ℹ 158 more rows\n# ℹ 2 more variables: precipitation_proba <int>, precipitation <dbl>\n```\n:::\n:::\n\n\n### Question 13\n\n#### Implémentez la fonction get_forecast.character. Cette fonction prend en entrée un argument address, de type character, de taille 1. Si cette condition n'est pas vérifiée, alors la fonction devra déclarer une erreur. La fonction appelera les deux fonctions address_to_gps puis la fonction get_forecast en passant le résultat de l'appel à address_to_gps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Obtient les prévisions météo en fonction d'une adresse.\n\n#'\n\n#' Cette fonction prend en entrée une adresse, utilise la fonction address_to_gps\n\n#' pour obtenir les coordonnées GPS, puis appelle la fonction get_forecast.numeric.\n\n#'\n\n#' @param address Une adresse sous forme de texte.\n\n#'\n\n#' @return Un tibble avec les prévisions météo.\n\n#'\n\n#' @seealso \\code{\\link{address_to_gps}}, \\code{\\link{get_forecast.numeric}}\n\n#'\n\n#' @export\n\nget_forecast.character <- function(address) {\n\n  if (!is.character(address) || length(address) != 1) {\n\n    stop(\"L'argument address doit être de type character et de taille 1.\")\n\n  }\n\n  coordinates <- get_gps_coordinate(address)\n\n  response_table <- perform_request(coordinates[1],coordinates[2])\n\n  unnested_table <- unnest_response(response_table)\n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_result <- get_forecast.character(\"9 Quai Henri Barbusse, Nantes, 44000, FRANCE\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPassing 1 address to the ArcGIS single address geocoder\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nQuery completed in: 0.1 seconds\n```\n:::\n\n```{.r .cell-code}\nprint(forecast_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 5\n   date_heure          temperature_celsius temperature_ressentie_celsius\n   <dttm>                            <dbl>                         <dbl>\n 1 2024-03-07 00:00:00                 6                             3.3\n 2 2024-03-07 01:00:00                 5.5                           2.6\n 3 2024-03-07 02:00:00                 6.4                           3  \n 4 2024-03-07 03:00:00                 5.8                           2.7\n 5 2024-03-07 04:00:00                 5.7                           2.5\n 6 2024-03-07 05:00:00                 4.9                           1.5\n 7 2024-03-07 06:00:00                 4                             0.4\n 8 2024-03-07 07:00:00                 3.9                           0.4\n 9 2024-03-07 08:00:00                 4.3                           0.5\n10 2024-03-07 09:00:00                 5.5                           1.2\n# ℹ 158 more rows\n# ℹ 2 more variables: precipitation_proba <int>, precipitation <dbl>\n```\n:::\n:::\n\n\n### Question 14\n\n#### Documentez la fonction get_forecast en utilisant les balises Roxygen appropriées\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Obtient les prévisions météo en fonction des coordonnées GPS ou de l'adresse.\n\n#'\n\n#' Cette fonction est générique et permet d'obtenir les prévisions météo en fonction des coordonnées GPS\n\n#' (latitude, longitude) ou d'une adresse spécifiée.\n\n#'\n\n#' @param x Un vecteur numérique de taille 2 représentant les coordonnées GPS (latitude, longitude).\n\n#' @param address Une adresse spécifiée en tant que caractère.\n\n#'\n\n#' @return Une tibble contenant les prévisions météo, comprenant la date, l'heure UTC, la température, la\n\n#' température ressentie, la probabilité de précipitation, et la quantité de précipitation.\n\n#'\n\n#' @seealso \\code{\\link{get_forecast.numeric}} et \\code{\\link{get_forecast.character}}\n\n#'\n\n#' @examples\n\n#' # Obtenir les prévisions météo pour des coordonnées GPS\n\n#' xy_coordinates <- c(48.85, 2.35)\n\n#' forecast_result <- get_forecast(xy_coordinates)\n\n#' print(forecast_result)\n\n#'\n\n#' # Obtenir les prévisions météo pour une adresse\n\n#' address_result <- get_forecast(\"9 Quai Henri Barbusse, Nantes, 44000, FRANCE\")\n\n#' print(address_result)\n\n#'\n\n#' @export\n\n#' @param x Un vecteur numérique de taille 2 représentant les coordonnées GPS (latitude, longitude).\n\n#' @param address Une adresse spécifiée en tant que caractère.\n\n#' @return Une tibble contenant les prévisions météo.\n\nget_forecast <- function(x) {\n\n  if (is.numeric(x)) {\n\n    result <- get_forecast.numeric(x)\n\n  } else if (is.character(x)) {\n\n    result <- get_forecast.character(x)\n\n  } else {\n\n    stop(\"L'un des arguments 'x' ou 'address' doit être spécifié.\")\n\n  }\n\n  print(graph_function(result))\n\n  return(result)\n\n}\n```\n:::\n\n\n### Question 15\n\n#### Mettez à jour le fichier DESCRIPTION. Assurez-vous d'avoir un NAMESPACE à jour en utilisant devtools::document\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPackage: olympicsWeather\n\nTitle: Obtention des previsions meteo pour les sites olympiques\n\nVersion: 0.0.0.9000\n\nAuthor@R: person(\"JAMIN\", \"Mathilde\", email = \"mathilde.jamin@etu.univ-nantes.fr\", role = c(\"aut\", \"cre\"))\n\nDescription: Ce package fournit des fonctionnalites pour obtenir les previsions meteo en fonction des coordonnees GPS ou des adresses des sites olympiques.\n\nLicense: GPL-3\n\nEncoding: UTF-8\n\nRoxygen: list(markdown = TRUE)\n\nRoxygenNote: 7.3.1\n\nImports:\n\n    devtools,\n\n    httr2,\n\n    jsonlite,\n\n    tibble,\n\n    purrr,\n\n    tidygeocoder,\n\n    usethis,\n\n    roxygen2,\n\n    lubridate,\n\n    ggplot2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generated by roxygen2: do not edit by hand\n\nexport(address_to_gps)\n\nexport(get_forecast)\n\nexport(get_forecast.character)\n\nexport(get_forecast.numeric)\n\nexport(get_gps_coordinate)\n\nexport(graph_function)\n\nexport(perform_request)\n\nexport(unnest_response)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Commande à réaliser dans la console :\n\n- document()\n\n- build()\n\n- devtools::install()\n```\n:::\n\n\n### Question Bonus\n\n#### Quelle stratégie employeriez-vous pour fournir une sortie visuelle aux utilisateurs ? Essayez de proposer une fonction dans le package pour rendre visuelle la sortie du package.\n\nNous pouvons proposer de faire un graphique avec ggplot, dans un autre script R relié au précédent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n#' Génère un graphique basé sur les données fournies.\n\n#'\n\n#' @param unnested_table Un tibble avec les données nécessaires pour le graphique.\n\n#' @return Un objet ggplot.\n\ngraph_function <- function(unnested_table) {\n\n  ggplot(unnested_table, aes(x = as.POSIXct(date_heure), y = temperature_celsius)) +\n\n    geom_line(color = \"navy\", size = 1, linetype = \"solid\") +\n\n    labs(title = \"Évolution de la Température\",\n\n         x = \"Date et Heure (GMT)\",\n\n         y = \"Température (°C)\") +\n\n    theme_minimal()\n\n}\n```\n:::\n",
    "supporting": [
      "exercice-4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}