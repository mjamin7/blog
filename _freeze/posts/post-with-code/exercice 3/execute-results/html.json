{
  "hash": "c8175cf56a6889192102e4883d8c6e53",
  "result": {
    "markdown": "## Exercice 3\n\nCe dernier exercice nous a permis d'utiliser des bases de données différentes notamment json, parquet et sqlite. Nous avons, ici aussi, nettoyer et visualiser les différentes bases. Nous avons également utiliser le package lubridate afin de traiter des dates.\n\n### Téléchargement des librairies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\n### Question 1\n\n#### Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- list.files(\"data\")\n\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n\n```{.r .cell-code}\nextensions <- tools::file_ext(data)\n\nprint(extensions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n:::\n\n\nIl y a 4 fichiers dans le dossier data dont un sous format sqlite, un autre json et enfin parquet.\n\n### Question 2\n\n#### Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo <- read_parquet(\"C:/Users/mathi/OneDrive/Documents/M1 ECAP/Semestre 2/R avancé et Git/TD3/tokyo_athletes.parquet\")\n\ndim(tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n:::\n\n\nLa table tokyo comprend 11 085 lignes et 3 colonnes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name               NOC             Discipline       \n Length:11085       Length:11085       Length:11085      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n```\n:::\n:::\n\n\nLes 3 colonnes se nomment :\n\n\\- Name\n\n\\- NOC\n\n\\- Discipline\n\n### Question 3\n\n#### Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics <-read_json(\"C:/Users/mathi/OneDrive/Documents/M1 ECAP/Semestre 2/R avancé et Git/TD3/olympics_athletes.json\")\n\ndim(olympics)\n\nstr(olympics)\n```\n:::\n\n\nIl y a 12 colonnes :\n\n\\- ID\n\n\\- Name\n\n\\- Sex\n\n\\- Age\n\n\\- Height\n\n\\- Weight\n\n\\- Team\n\n\\- NOC\n\n\\- Games\n\n\\- City\n\n\\- Sport\n\n\\- Event\n\n### Question 4\n\n#### Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnexion <- dbConnect(drv=RSQLite::SQLite(), dbname=\"C:/Users/mathi/OneDrive/Documents/M1 ECAP/Semestre 2/R avancé et Git/TD3/data.sqlite\")\n\ntables <- dbListTables(connexion)\n\ntables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\nIci, cela contient :\n\n\\- olympics_athletes\n\n\\- tokyo_athletes\n\n\\- tokyo_medals\n\n\\- tokyo_teams\n\n\n::: {.cell}\n\n:::\n\n\n### Question 5\n\n#### Créez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n\n  \n\n  file_olympics <- \"olympics_athletes.json\"\n\n  file_tokyo <- \"tokyo_athletes.parquet\"\n\n  \n\n  tryCatch({\n\n    # Chargeons les données json avec read_json\n\n    data_olympics <- read_json(file_olympics, simplifyVector = TRUE)\n\n    \n\n    #Convertissons les données en data.frame \n\n   \n\n   data_olympics_df <- as.data.frame(data_olympics)\n\n    \n\n    # Utilisation dbWriteTable avec append=TRUE pour ajouter à la table déjà existante\n\n  dbWriteTable(connexion, \"olympics_athletes\", data_olympics_df, append = TRUE)\n\n    \n\n    # Utilisation dbWriteTable avec overwrite=TRUE pour écraser la table existante (sinon beug)\n\n  dbWriteTable(connexion, \"tokyo_athletes\", read_parquet(file_tokyo), overwrite = TRUE)\n\n  }, error = function(e) {\n\n    cat(\"Erreur lors de la lecture du fichier JSON :\", conditionMessage(e), \"\\n\")\n\n  })\n\n  \n\n  # Ne pas fermer la connexion ici \n\n} else {\n\n  cat(\"Erreur: La connexion à la base de données a échoué.\")\n\n}\n```\n:::\n\n\n### Question 6\n\n#### Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n\n  colonnes_olympics <- dbListFields(connexion, \"olympics_athletes\")\n\n  print(colonnes_olympics)\n\n} else {\n\n  cat(\"Erreur: La connexion à la base de données a échoué.\")\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLes colonnes sont les suivantes :\n\n\\- ID\n\n\\- Name\n\n\\- Sex\n\n\\- Age\n\n\\- Height\n\n\\- Weight\n\n\\- Team\n\n\\- NOC\n\n\\- Games\n\n\\- City\n\n\\- Sport\n\n\\- Event\n\n\\- Medal\n\n### Question 7\n\n#### Importez cette table depuis la base de données en utilisant la fonction dbReadTable.\n\nConvertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n\n  \n\n  nom_table <- \"olympics_athletes\"\n\n  \n\n  #Importation la table depuis la base de données\n\n  table_importee <- dbReadTable(connexion, nom_table)\n\n  \n\n  #Convertissons la table en tibble\n\n  tibble_resultat <- as_tibble(table_importee)\n\n  \n\n  print(tibble_resultat)\n\n  \n\n} else {\n\n  cat(\"Erreur: La connexion à la base de données a échoué.\")\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,078,924 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,078,914 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\n### Dans les questions suivantes, utilisez en priorité les fonctions des packages dplyr, tidyr.\n\n### Question 8\n\n#### Convertissez la colonne Sex en variable catégorielle avec la fonction mutate\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_resultat <- tibble_resultat|> \n\n  mutate(Sex = as.factor(Sex))\n\nprint(tibble_resultat)\n```\n:::\n\n\n### Question 9\n\n#### Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble_resultat <- tibble_resultat |> \n\n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \", convert = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tibble_resultat)\n\ntibble_resultat\n```\n:::\n\n\n### Les questions suivantes nécessitent l'application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n### Question 10\n\n#### Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultats_moyenne_age <- tibble_resultat |> \n\n  group_by(Year) |> \n\n  summarise(moyenne_age = mean(Age, na.rm = TRUE))\n\n#Identification de l'édition avec les athlètes les plus jeunes\n\nplus_jeunes <- resultats_moyenne_age |> \n\n  filter(moyenne_age == min(moyenne_age, na.rm = TRUE))\n\n# Identification de l'édition avec les athlètes les plus vieux\n\nplus_vieux <- resultats_moyenne_age |>  \n\n  filter(moyenne_age == max(moyenne_age, na.rm = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(resultats_moyenne_age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35 × 2\n    Year moyenne_age\n   <int>       <dbl>\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.0\n 9  1928        27.9\n10  1932        29.6\n# ℹ 25 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(plus_jeunes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1896        23.6\n```\n:::\n:::\n\n\nL'édition avec les athlètes les plus jeunes était en 1896 et la moyenne d'âge était de 23,6 ans\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(plus_vieux)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1932        29.6\n```\n:::\n:::\n\n\nL'édition avec les athlètes les plus vieux était en 1932 et la moyenne d'âge était de 29,6 ans\n\n### Question 11\n\n#### Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes_femmes <- tibble_resultat |> \n\n  filter(Sex == \"F\")\n\n#Remplacons les valeurs manquantes de Height par une valeur spécifique ici 0 pour simplifier\n\nathletes_femmes <- athletes_femmes |> \n\n  mutate(Height = ifelse(is.na(Height), 0, Height))\n\n#Regroupeons par discipline et par année, puis calculons la taille maximale des athlètes féminines\n\nplus_grande_taille_par_discipline <- athletes_femmes |> \n\n  group_by(Sport, Year, .groups = \"drop_last\") |> \n\n  summarise(taille_max = max(Height, na.rm = TRUE), .groups = \"drop_last\")\n\n#Identification de la discipline avec la plus grande taille pour chaque année\n\nplus_grande_taille_discipline_par_annee <- plus_grande_taille_par_discipline |> \n\n  group_by(Year, .groups = \"drop_last\") |> \n\n  filter(taille_max == max(taille_max, na.rm = TRUE), .groups == \"drop_last\")\n\n#Identification de la discipline qui a été la plus grande (en fonction de la fréquence)\n\ndiscipline_plus_grande_frequence <- plus_grande_taille_discipline_par_annee |> \n\n  group_by(Sport, .groups = \"drop_last\") |> \n\n  summarise(frequence = n(), .groups = \"drop_last\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\")\n\nprint(plus_grande_taille_discipline_par_annee, n = 60)\n```\n:::\n\n\nLa plus grande taille par discipline provient du Basketball avec 213cm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Discipline avec la plus grande taille d'athlètes féminines le plus souvent :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Discipline avec la plus grande taille d'athlètes féminines le plus souvent :\"\n```\n:::\n\n```{.r .cell-code}\nprint(discipline_plus_grande_frequence, n = 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 3\n# Groups:   Sport [17]\n   Sport          .groups   frequence\n   <chr>          <chr>         <int>\n 1 Archery        drop_last         2\n 2 Athletics      drop_last         6\n 3 Basketball     drop_last        11\n 4 Bobsleigh      drop_last         3\n 5 Croquet        drop_last         1\n 6 Diving         drop_last         2\n 7 Equestrianism  drop_last         1\n 8 Fencing        drop_last         4\n 9 Figure Skating drop_last         1\n10 Golf           drop_last         1\n11 Ice Hockey     drop_last         1\n12 Luge           drop_last         2\n13 Motorboating   drop_last         1\n14 Sailing        drop_last         2\n15 Swimming       drop_last         2\n16 Tennis         drop_last         5\n17 Volleyball     drop_last         3\n```\n:::\n:::\n\n\nTout cela pour une frequence de 11.\n\n##### Vous disposez du texte suivant :\n\n###### Les jeux olympiques d'été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d'été se déroulent normalement tous \n\nles 4 ans, durant les mois de Juillet et Août. \n\nLes jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, \n\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, \n\net ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. \n\nPlus de 10000 athlètes sont attendus du monde entier à Paris.\"\n```\n:::\n\n\n### Question 12\n\n#### En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que \"26 Juillet 2024\". Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Expression régulière pour capturer une date au format \"jour Mois année\"\n\nregex_date <- \"\\\\b\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\n#Utilisaton str_extract_all pour extraire toutes les dates du texte\n\ndates <- str_extract_all(texte, regex_date)[[1]]\n\nprint(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\n### Question 13\n\n#### Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmois_en_numero <- function(mois) {\n\n  mois <- tolower(mois)\n\n  mois_numeros <- c(\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\")\n\n  return(match(mois, mois_numeros))\n\n}\n\n#Remplaceons les noms des mois par leur numéro\n\ndates_numerotees <- str_replace_all(dates, regex_date, function(match) {\n\n  elements <- str_split(match, \" \")[[1]]\n\n  elements[2] <- mois_en_numero(elements[2])\n\n  return(paste(elements, collapse = \" \"))\n\n})\n\nprint(dates_numerotees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 8 2016\"  \"20 8 2016\" \"23 7 2021\" \"8 8 2021\"  \"26 7 2024\" \"11 8 2024\"\n```\n:::\n:::\n\n\n### Question 14\n\n#### Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvertir_en_date <- function(date_texte) {\n\n  elements <- str_split(date_texte, \" \")[[1]]\n\n  jour <- as.integer(elements[1])\n\n  mois <- as.integer(elements[2])\n\n  annee <- as.integer(elements[3])\n\n  return(dmy(paste(jour, mois, annee, sep = \"-\")))\n\n}\n\n#Appliqueons la fonction à chaque élément de la liste\n\ndates_converties <- sapply(dates_numerotees, convertir_en_date)\n\nprint(dates_converties)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 5 8 2016 20 8 2016 23 7 2021  8 8 2021 26 7 2024 11 8 2024 \n    17018     17033     18831     18847     19930     19946 \n```\n:::\n:::\n\n\n### Question 15\n\n#### Combien de jours ont séparés les éditions de Rio et Tokyo ? \n\n#### Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrio_date <- dmy(\"5 Août 2016\")\n\ntokyo_date <- dmy(\"23 Juillet 2021\")\n\nparis_date <- dmy(\"26 Juillet 2024\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\njours_entre_rio_et_tokyo <- as.numeric(difftime(tokyo_date, rio_date, units = \"days\"))\n\ncat(\"Nombre de jours entre Rio et Tokyo :\", jours_entre_rio_et_tokyo, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Rio et Tokyo : 1813 jours\n```\n:::\n:::\n\n\nIl y a 1 813 jours entre les éditions de Rio en 2016 et de Tokyo en 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\njours_entre_tokyo_et_paris <- as.numeric(difftime(paris_date, tokyo_date, units = \"days\"))\n\ncat(\"Nombre de jours entre Tokyo et Paris :\", jours_entre_tokyo_et_paris, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Tokyo et Paris : 1099 jours\n```\n:::\n:::\n\n\nIl y a 1 099 jours entre les éditions de Tokyo en 2021 et de Paris en 2024\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemaines_entre_rio_et_tokyo <- as.numeric(difftime(tokyo_date, rio_date, units = \"weeks\"))\n\nsemaines_entre_tokyo_et_paris <- as.numeric(difftime(paris_date, tokyo_date, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Rio et Tokyo :\", semaines_entre_rio_et_tokyo, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Rio et Tokyo : 259 semaines\n```\n:::\n\n```{.r .cell-code}\ncat(\"Nombre de semaines entre Tokyo et Paris :\", semaines_entre_tokyo_et_paris, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Tokyo et Paris : 157 semaines\n```\n:::\n:::\n\n\nLe nombre de semaine qui séparent les éditions de Rio et de Tokyo est de 259 semaines et entre Tokyo et Paris de 157 semaines.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}